<FlowDocumentPageViewer xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <FlowDocument ColumnWidth="350" ColumnGap="15" ColumnRuleWidth="1" ColumnRuleBrush="LightGray">

    <Paragraph Style="{StaticResource HeaderStyle}">Panels Overview</Paragraph>

    <Paragraph>
      <Rectangle Fill="Black" Height="1" Width="500" HorizontalAlignment="Left" />
      <LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource DisStyle}">
      [This topic is pre-release documentation and is subject to change in future releases. Blank topics are included as placeholders.]<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      <Bold>Panels</Bold> are components that control the rendering of elementsâ€”their size and dimensions, their position, and the arrangement of their child content. Rendering is controlled by properties specified on panels.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">This topic contains the following sections.</Paragraph>

    <List>

      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#panelclass">The Panel Class</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#panelcommon">Panel Element Common Members</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#panelderived">Derived Panel Elements</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#panelui">User Interface Panels</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#panelcustom">Custom Panel Elements</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#panellocal">Localization/Globalization Support</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#panelrelated">Related Topics</Hyperlink>
        </Paragraph>
      </ListItem>

    </List>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="panelclass">The Panel Class</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      <Bold>Panel</Bold> provides a base class for all elements that define layout characteristics in Windows Presentation Foundation. Derived <Bold>Panel</Bold> elements are used to position and arrange child elements in "Extensible Application Markup Language" ("XAML") and code.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      Windows Presentation Foundation includes a comprehensive suite of derived <Bold>Panel</Bold> implementations that provides options for many complex layouts. Each of these derived classes exposes properties and methods that enable most standard user interface (UI) scenarios. Developers who are unable to find a layout design pattern or child nesting behavior that meets their needs can create new layout containers by overriding the ArrangeOverride and MeasureOverride methods of <Bold>Panel</Bold>.
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="panelcommon"> Element Common Members</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      The <Bold>Panel</Bold> element extends FrameworkElement and provides a further framework for all controls that define layout characteristics. Because <Bold>Panel</Bold> inherits from FrameworkElement, all <Bold>Panel</Bold> elements support the base properties and methods defined on that class, including Height, Width, HorizontalAlignment, VerticalAlignment, Visibility, FlowDirection, LayoutTransform, Margin, ArrangeOverride and MeasureOverride.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      In addition, <Bold>Panel</Bold> exposes three properties that are particularly useful for element layout: Background, Children, and InternalChildren. The Background property is used to fill the area between the boundaries of a derived <Bold>Panel</Bold> element. Children and InternalChildren are similar; however, InternalChildren includes all child elements of a parent <Bold>Panel</Bold>, including those generated by data binding. Both return a UIElementCollection of child elements of the derived <Bold>Panel</Bold> implementation.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      <Bold>Panel</Bold> also defines two methods of particular importance, CreateUIElementCollection and OnRender. CreateUIElementCollection is used to cache information on child elements and to perform incremental layout updates. OnRender overrides the default implementation (OnRender) and draws the content of an OnDemandVisual. This method can be overridden to change the rendering behavior of a <Bold>Panel</Bold> element.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      Other members of the <Bold>Panel</Bold> class can be viewed here.
    </Paragraph>


    <Paragraph Style="{StaticResource noteParagraph}">
      <Bold>Note:</Bold> <Bold>Panel</Bold> also exposes access to the IAddChild interface, which is intended for internal use by the "XAML" parser only. Using this method directly is not recommended.
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="panelderived">Derived Panel Elements</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      Seven elements derive from <Bold>Panel</Bold> and provide their own unique rendering behaviors. A few of these <Bold>Panel</Bold> elements are specialized (BulletPanel, TabPanel, ToolBarOverflowPanel) for particular layout situations, and not very useful for UI layout. However, there are four defined <Bold>Panel</Bold> classes (Canvas, DockPanel, Grid, and StackPanel) that are designed specifically for creating rich application UI.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      Each <Bold>Panel</Bold> element encapsulates its own special functionality, as seen in the following table.
    </Paragraph>

    <Table CellSpacing="5">
      <Table.Columns>
        <TableColumn Width="Auto"/>
        <TableColumn Width="Auto"/>
        <TableColumn Width="Auto"/>
      </Table.Columns>
      <TableRowGroup>
        <TableRow>
          <TableCell>
            <Paragraph FontWeight="Bold">Element Name</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph FontWeight="Bold">UI Panel?</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph FontWeight="Bold">Description</Paragraph>
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">BulletPanel</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">No</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">A primitive layout control designed to host only two child elements. The content of a BulletPanel is usually a text string and a glyph representing a control, such as a check box or a radio button. </Paragraph>
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Canvas</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Yes</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Defines an area within which you can explicitly position child elements by coordinates relative to the Canvas area.</Paragraph>
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">DockPanel</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Yes</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Defines an area within which you can arrange child elements either horizontally or vertically, relative to each other.</Paragraph>
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Grid</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Yes</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Defines a flexible grid area consisting of columns and rows. Child elements of a Grid can be positioned precisely using the Margin property. </Paragraph>
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">StackPanel</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Yes</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Arranges child elements into a single line that can be oriented horizontally or vertically. </Paragraph>
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">TabPanel</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">No</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Handles the layout of tab buttons in a TabControl.</Paragraph>
          </TableCell>
        </TableRow>
        <TableRow>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">ToolBarOverflowPanel</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">No</Paragraph>
          </TableCell>
          <TableCell>
            <Paragraph Style="{StaticResource tableContentStyle}">Used to arrange overflow items of a ToolBar.</Paragraph>
          </TableCell>
        </TableRow>
      </TableRowGroup>

    </Table>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="panelui">User Interface Panels</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      There are four <Bold>Panel</Bold> classes available in Windows Presentation Foundation that are optimized to support UI scenarios: Canvas, DockPanel, Grid, and StackPanel. These panels are easy to use, versatile, and extensible enough for most applications.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">More detailed descriptions of each of these elements can be found below.</Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}">Canvas</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      The <Bold>Canvas</Bold> element enables positioning of content according to absolute x- and y-coordinates. Elements can be drawn in a unique location; or, if elements occupy the same coordinates, the order in which they appear in markup determines the order in which the elements are drawn.
    </Paragraph>


    <Paragraph Style="{StaticResource mainContentStyle}">
      The following markup example demonstrates how to use <Bold>Canvas</Bold> to absolutely position content. This markup produces three 100-pixel squares. The first square is red, and its top-left (x, y) position is specified as (0, 0). The second square is green, and its top-left position is (100, 100), just below and to the right of the first square. The third square is blue, and its top-left position is (50, 50), thus encompassing the lower-right quadrant of the first square and the upper-left quadrant of the second. Because the third square is laid out last, it appears to be on top of the other two squaresâ€”that is, the overlapping portions assume the color of the third box.
    </Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Text="Canvas Sample">
    &lt;Canvas Height="300" Width="300">
        &lt;Canvas Height="100" Width="100"  Top="0" Left="0">
            &lt;Rectangle Width="100" Height="100" Fill="red"/>   
        &lt;/Canvas>
        &lt;Canvas Height="100" Width="100" Top="100" Left="100">
            &lt;Rectangle Width="100" Height="100" Fill="green"/>  
        &lt;/Canvas>
        &lt;Canvas Height="100" Width="100" Top="50" Left="50">
            &lt;Rectangle Width="100" Height="100" Fill="blue"/>  
        &lt;/Canvas>    
    &lt;/Canvas>
&lt;/Page>
    </Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <Canvas Height="300" Width="300">
          <Canvas Height="100" Width="100"  Top="0" Left="0">
            <Rectangle Width="100" Height="100" Fill="red"/>
          </Canvas>
          <Canvas Height="100" Width="100" Top="100" Left="100">
            <Rectangle Width="100" Height="100" Fill="green"/>
          </Canvas>
          <Canvas Height="100" Width="100" Top="50" Left="50">
            <Rectangle Width="100" Height="100" Fill="blue"/>
          </Canvas>
        </Canvas>
      </Expander>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The compiled application yields a new UI that looks like this.</Paragraph>

    <Paragraph Style="{StaticResource imageStyler}">
      <Image Stretch="Uniform">
        <Image.Source>
          <BitmapImage UriSource="\images\panel_intro_canvas.png"/>
        </Image.Source>
      </Image>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      For more detailed information on the <Bold>Canvas</Bold> element, see <Hyperlink NavigateUri="canvas_ovw.xaml">Canvas Overview</Hyperlink>.
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}">DockPanel</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      The <Bold>DockPanel</Bold> element uses the attached Dock property to position content along the edges of a container. When Dock is set to Top or Bottom, it positions child elements above or below each other. When Dock is set to Left or Right, it positions child elements to the left or right of each other. The LastChildFill property determines the position of the final element added as a child of a <Bold>DockPanel</Bold>.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      You can use <Bold>DockPanel</Bold> to position a group of related controls, such as a set of buttons. Alternately, you can use it to create a "paned" UI, similar to that found in Microsoft Outlook.
    </Paragraph>


    <Paragraph Style="{StaticResource mainContentStyle}">
      The following markup demonstrates how to partition space using a <Bold>DockPanel</Bold>. Five Border elements are added as children of a parent <Bold>DockPanel</Bold>. Each uses a different positioning property of a <Bold>DockPanel</Bold> to partition space. The final element "fills" the remaining, unallocated space.
    </Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
    &lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">   
    &lt;DockPanel Height="250" Width="400">
        &lt;Border Height="25" Background="SkyBlue" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Top">
            &lt;TextBlock Foreground="black">Dock = "Top"&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Height="25" Background="SkyBlue" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Top">
            &lt;TextBlock Foreground="black">Dock = "Top"&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Height="25" Background="#ffff99" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Bottom">
            &lt;TextBlock Foreground="black">Dock = "Bottom"&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Width="200" Background="PaleGreen" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Left">
            &lt;TextBlock Foreground="black">Dock = "Left"&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Background="White" BorderBrush="Black" BorderThickness="1">
            &lt;TextBlock Foreground="black" TextWrapping="Wrap">This content "Fills" the remaining, unallocated space.&lt;/TextBlock>
        &lt;/Border>
    &lt;/DockPanel>
    &lt;/Page>
    </Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <DockPanel Height="250" Width="400">
          <Border Height="25" Background="SkyBlue" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Top">
            <TextBlock Foreground="black">Dock = "Top"</TextBlock>
          </Border>
          <Border Height="25" Background="SkyBlue" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Top">
            <TextBlock Foreground="black">Dock = "Top"</TextBlock>
          </Border>
          <Border Height="25" Background="#ffff99" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Bottom">
            <TextBlock Foreground="black">Dock = "Bottom"</TextBlock>
          </Border>
          <Border Width="200" Background="PaleGreen" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Left">
            <TextBlock Foreground="black">Dock = "Left"</TextBlock>
          </Border>
          <Border Background="White" BorderBrush="Black" BorderThickness="1">
            <TextBlock Foreground="black" TextWrapping="Wrap">This content "Fills" the remaining, unallocated space.</TextBlock>
          </Border>
        </DockPanel>
      </Expander>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The compiled application yields a new UI that looks like this.</Paragraph>

    <Paragraph Style="{StaticResource imageStyler}">
      <Image Stretch="Uniform">
        <Image.Source>
          <BitmapImage UriSource="\images\panel_intro_dockpanel.png"/>
        </Image.Source>
      </Image>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      For more detailed information on the <Bold>DockPanel</Bold> element, see <Hyperlink NavigateUri="dockpanel_ovw.xaml">DockPanel Overview</Hyperlink>.
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}">Grid</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      A <Bold>Grid</Bold> enables you to easily position and style elements. It provides similar functionality to the Table element, but adds additional capabilities that make possible more precise positioning and styling of child objects.
    </Paragraph>


    <Paragraph Style="{StaticResource mainContentStyle}">The following markup demonstrates how to build a UI similar to that found on the Run dialog available on the Microsoft Windows Start menu.</Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Grid Background="#DCDCDC"
          Width="375"
          Height="150"
          HorizontalAlignment="Left"
          VerticalAlignment="Top"
          ShowGridLines="True">
        &lt;Grid.ColumnDefinitions>
        &lt;ColumnDefinition Width="Auto" />
        &lt;ColumnDefinition Width="*" />
        &lt;ColumnDefinition />
        &lt;ColumnDefinition />
        &lt;ColumnDefinition />
        &lt;/Grid.ColumnDefinitions>
        &lt;Grid.RowDefinitions>
        &lt;RowDefinition Height="Auto" />
        &lt;RowDefinition Height="Auto" />
        &lt;RowDefinition Height="*" />
        &lt;RowDefinition Height="Auto" />
        &lt;/Grid.RowDefinitions>

        &lt;Image Grid.Column="0" Grid.Row="0" Source="RunIcon.png" />
        &lt;TextBlock Grid.Column="1" Grid.ColumnSpan="4" Grid.Row="0" Margin="0,5,0,0" TextWrapping="Wrap">
            Type the name of a program, folder, document, or
            Internet resource, and Windows will open it for you.
        &lt;/TextBlock>
        &lt;TextBlock Grid.Column="0" Grid.Row="1" Margin="3,3,0,0">Open:&lt;/TextBlock>
        &lt;TextBox Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="5" Height="Auto" Width="Auto" />
        &lt;Button Grid.Row="3" Grid.Column="2">OK&lt;/Button>
        &lt;Button Grid.Row="3" Grid.Column="3">Cancel&lt;/Button>
        &lt;Button Grid.Row="3" Grid.Column="4">Browse ...&lt;/Button>
    &lt;/Grid>
&lt;/Page>  
    </Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <Grid Background="#DCDCDC"
              Width="375"
              Height="150"
              HorizontalAlignment="Left"
              VerticalAlignment="Top"
              ShowGridLines="True">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition />
            <ColumnDefinition />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
          </Grid.RowDefinitions>
          <Image Grid.Column="0" Grid.Row="0" Stretch="None">
            <Image.Source>
              <BitmapImage UriSource="\images\runicon.PNG"/>
            </Image.Source>
          </Image>
          <TextBlock Grid.Column="1" Grid.ColumnSpan="4" Grid.Row="0" Margin="0,5,0,0" TextWrapping="Wrap">
            Type the name of a program, folder, document, or
            Internet resource, and Windows will open it for you.
          </TextBlock>
          <TextBlock Grid.Column="0" Grid.Row="1" Margin="3,3,0,0">Open:</TextBlock>
          <TextBox Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="5" Height="Auto" Width="Auto" />
          <Button Grid.Row="3" Grid.Column="2">OK</Button>
          <Button Grid.Row="3" Grid.Column="3">Cancel</Button>
          <Button Grid.Row="3" Grid.Column="4">Browse ...</Button>
        </Grid>
      </Expander>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The compiled application yields a new UI that looks like this.</Paragraph>

    <Paragraph Style="{StaticResource imageStyler}">
      <Image Stretch="Uniform">
        <Image.Source>
          <BitmapImage UriSource="\images\run_dialog.png"/>
        </Image.Source>
      </Image>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      For more detailed information on the <Bold>Grid</Bold> element, see <Hyperlink NavigateUri="grid_ovw.xaml">Grid Overview</Hyperlink>.
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}">StackPanel</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      A <Bold>StackPanel</Bold> enables you to "stack" elements in an assigned direction. The default stack direction in a <Bold>StackPanel</Bold> is vertical. The Orientation property can be used to control content flow in a <Bold>StackPanel</Bold>.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      The following markup demonstrates how to use a <Bold>StackPanel</Bold> to create a set of vertically-positioned buttons.
    </Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Text="StackPanel Sample">
    &lt;StackPanel HorizontalAlignment="Left"
                VerticalAlignment="Top">
        &lt;Button DockPanel.Dock="Top">Button 1&lt;/Button>
        &lt;Button DockPanel.Dock="Top">Button 2&lt;/Button>
        &lt;Button DockPanel.Dock="Top">Button 3&lt;/Button>
    &lt;/StackPanel>
&lt;/Page>
</Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <StackPanel HorizontalAlignment="Left"
                    VerticalAlignment="Top">
          <Button DockPanel.Dock="Top">Button 1</Button>
          <Button DockPanel.Dock="Top">Button 2</Button>
          <Button DockPanel.Dock="Top">Button 3</Button>
        </StackPanel>
      </Expander>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The compiled application yields a new UI that looks like this.</Paragraph>

    <Paragraph Style="{StaticResource imageStyler}">
      <Image Stretch="Uniform">
        <Image.Source>
          <BitmapImage UriSource="\images\panel_intro_stackpanel.png"/>
        </Image.Source>
      </Image>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      For more detailed information on the <Bold>StackPanel</Bold> element, see <Hyperlink NavigateUri="stackpanel_ovw.xaml">StackPanel Overview</Hyperlink>.
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="panelcustom">Custom Panel Elements</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      While Windows Presentation Foundation provides an array of flexible layout controls, custom layout behaviors can also be achieved by overriding the ArrangeOverride and MeasureOverride methods of <Bold>Panel</Bold>. Custom sizing and positioning can be done by defining new positioning behaviors within these override methods.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      Similarly, custom layout behaviors based on existing <Bold>Panel</Bold> classes (such as Canvas or Grid can be defined by overriding their ArrangeOverride and MeasureOverride methods.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      The following markup demonstrates how to create a custom <Bold>Panel</Bold> element using C#. This new <Bold>Panel</Bold>, defined as PlotPanel, supports the positioning of child elements through the use of hard-coded x- and y-coordinates. In this example, a Rectangle element (not shown) is positioned at plot point 50 (x), and 50 (y).
    </Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
...
public class PlotPanel : Panel
    {
    // Default public constructor
    public PlotPanel()
        : base()
        {
        }
    // Override the default Measure method of Panel
    protected override Size MeasureOverride(Size availableSize)
        {
            Size childSize = availableSize;
            foreach (UIElement child in InternalChildren)
            {
                if (child == null) { continue; }
                child.Measure(childSize);
            }
            return availableSize;
        }

        protected override Size ArrangeOverride(Size finalSize)
        {
            foreach (UIElement child in InternalChildren)
            {
                if (child == null) { continue; }
                double x = 50;
                double y = 50;
                child.Arrange(new Rect(new Point(x, y), child.DesiredSize));
            }
            return finalSize; // Returns the final Arranged size
        }
    }
...
</Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="panellocal">Localization/Globalization Support</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">Windows Presentation Foundation supports a number of features that assist in the creation of localizable UI.</Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      All <Bold>Panel</Bold> elements natively support the FlowDirection property, which can be used to dynamically reflow content based on a user's locale or language settings.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The SizeToContent property provides a mechanism that enables application developers to anticipate the needs of localized UI. Using the WidthAndHeight value of this property, a parent Window always sizes dynamically to fit content and is not constrained by artificial height or width restrictions.</Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">DockPanel, Grid, and StackPanel are all good choices for localizable UI. Canvas is not a good choice, however, because it positions content absolutely, making it difficult to localize.</Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="panelrelated">
      Related Topics<LineBreak/>
    </Paragraph>
    <List>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="canvas_ovw.xaml" TargetName="frame2">Canvas Overview</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="grid_ovw.xaml" TargetName="frame2">Grid Overview</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="layout_ovw.xaml" TargetName="frame2">Layout "Cook Book"</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="panels_ovw.xaml" TargetName="frame2">Panels Overview</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="stackpanel_ovw.xaml" TargetName="frame2">StackPanel Overview</Hyperlink>
        </Paragraph>
      </ListItem>
    </List>

    <Paragraph Style="{StaticResource mainContentStyle}">Send comments about this topic to Microsoft. Â© Microsoft Corporation. All rights reserved.</Paragraph>

  </FlowDocument>
</FlowDocumentPageViewer>