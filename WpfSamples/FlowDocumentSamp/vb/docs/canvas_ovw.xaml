<FlowDocumentPageViewer xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
<FlowDocument ColumnWidth="350" ColumnGap="15" ColumnRuleWidth="1" ColumnRuleBrush="LightGray">

    <Paragraph Style="{StaticResource HeaderStyle}">Canvas Overview</Paragraph>
    <Paragraph><Rectangle Fill="Black" Height="1" Width="500" HorizontalAlignment="Left" /><LineBreak/></Paragraph>
    
    <Paragraph Style="{StaticResource DisStyle}">[This topic is pre-release documentation and is subject to change in future releases. Blank topics are included as placeholders.]<LineBreak/></Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">The <Bold>Canvas</Bold> element is used to position content according to absolute x- and y-coordinates. <Bold>Canvas</Bold> provides ultimate flexibility for positioning and arranging elements on the screen. Elements can be drawn in a unique location, or in the event that elements occupy the same coordinates, the order in which they appear in markup determines the order in which elements are drawn.</Paragraph>

<Paragraph Style="{StaticResource mainContentStyle}">This topic contains the following sections.</Paragraph>

<List>

<ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="#whatcanvas">What Can I Do with the Canvas?</Hyperlink></Paragraph></ListItem>
<ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="#bordercanvas">Adding a Border to a Canvas Element</Hyperlink></Paragraph></ListItem>
<ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="#ordercanvas">Order of Elements in a Canvas</Hyperlink></Paragraph></ListItem>
<ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="#canvasxaml">Creating a Canvas in "XAML"</Hyperlink></Paragraph></ListItem>
<ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="#canvascode">Creating a Canvas in Code</Hyperlink></Paragraph></ListItem>
<ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="#canvasrelated">Related Topics</Hyperlink></Paragraph></ListItem>

</List>
    
    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="whatcanvas">What Can I Do with the Canvas?</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}"><Bold>Canvas</Bold> provides the most flexible layout support of any Panel element. Height and Width properties are used to define the area of the canvas, and elements inside are assigned absolute coordinates relative to the upper left corner of the parent <Bold>Canvas</Bold>. This allows you to position and arrange elements precisely where you want them on the screen.</Paragraph>

<Paragraph Style="{StaticResource SubHeaderStyle}" Name="bordercanvas">Adding a Border to a Canvas Element</Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">In order for a <Bold>Canvas</Bold> element to have a border, it must be encapsulated within a Border element.</Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The following code example shows how to display Hello World within a <Bold>Canvas</Bold> with a border and background.</Paragraph>

    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Border 
       BorderThickness="2"
       BorderBrush="Black"
       Background="LightGray"
       HorizontalAlignment="Left" 
       VerticalAlignment="Top"
       Width="100"
       Height="100">
        &lt;Canvas>
            &lt;TextBlock Canvas.Top="10" Canvas.Left="20">Hello World!&lt;/TextBlock>
        &lt;/Canvas>
    &lt;/Border>
&lt;/Page>
</Paragraph>

<Paragraph Style="{StaticResource expanderStyle}">   
    <Expander IsExpanded="true" Header="Rendered Output">            
       <Border 
       BorderThickness="2"
       BorderBrush="Black"
       Background="LightGray"
       HorizontalAlignment="Left" 
       VerticalAlignment="Top"
       Width="100"
       Height="100">
        <Canvas>
            <TextBlock Canvas.Top="10" Canvas.Left="20">Hello World!</TextBlock>
        </Canvas>
    </Border>
</Expander>
    </Paragraph>
        
<Paragraph Style="{StaticResource SubHeaderStyle}" Name="ordercanvas">Order of Elements in a Canvas</Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">The order of child elements (z-index) in a <Bold>Canvas</Bold> is determined by their order in "Extensible Application Markup Language" ("XAML") or code. As a consequence, layered order can be achieved when elements share the same coordinates. <Bold>Canvas</Bold> and Grid are the only layout controls that supports sharing of space in this manner.</Paragraph>

<Paragraph Style="{StaticResource mainContentStyle}">The following example demonstrates how to achieve layered order of elements within a <Bold>Canvas</Bold>. Notice that each Rectangle element is drawn in the order it appears in "XAML".</Paragraph>

<Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Canvas Width="400" Height="600">
        &lt;Rectangle Width="100" Height="100" Canvas.Top="100" Canvas.Left="100" Fill="blue"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="150" Canvas.Left="150" Fill="yellow"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="200" Canvas.Left="200" Fill="green"/>

        &lt;!-- Reverse the order to illustrate z-index layering -->

        &lt;Rectangle Width="100" Height="100" Canvas.Top="300" Canvas.Left="200" Fill="green"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="350" Canvas.Left="150" Fill="yellow"/>
        &lt;Rectangle Width="100" Height="100" Canvas.Top="400" Canvas.Left="100" Fill="blue"/>
    &lt;/Canvas>
&lt;/Page>
</Paragraph>
    
<Paragraph Style="{StaticResource expanderStyle}">   
    <Expander IsExpanded="true" Header="Rendered Output"> 
        <Canvas Width="400" Height="600">
        <Rectangle Width="100" Height="100" Canvas.Top="100" Canvas.Left="100" Fill="blue"/>
        <Rectangle Width="100" Height="100" Canvas.Top="150" Canvas.Left="150" Fill="yellow"/>
        <Rectangle Width="100" Height="100" Canvas.Top="200" Canvas.Left="200" Fill="green"/>

        <!-- Reverse the order to illustrate z-index layering -->

        <Rectangle Width="100" Height="100" Canvas.Top="300" Canvas.Left="200" Fill="green"/>
        <Rectangle Width="100" Height="100" Canvas.Top="350" Canvas.Left="150" Fill="yellow"/>
        <Rectangle Width="100" Height="100" Canvas.Top="400" Canvas.Left="100" Fill="blue"/>
    </Canvas>
    </Expander>
</Paragraph>
    
<Paragraph Style="{StaticResource SubHeaderStyle}" Name="canvasxaml">Creating a Canvas in "XAML"</Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">A <Bold>Canvas</Bold> can be instantiated simply by using "XAML".</Paragraph>

<Paragraph Style="{StaticResource mainContentStyle}">The following markup example demonstrates how to use <Bold>Canvas</Bold> to absolutely position content. This markup produces three 100-pixel squares. The first square is red, and its top-left (x, y) position is specified as (0, 0). The second square is green, and its top-left position is (100, 100), just below and to the right of the first square. The third square is blue, and its top-left position is (50, 50), thus encompassing the lower-right quadrant of the first square and the upper-left quadrant of the second. Because the third square is laid out last, it appears to be on top of the other two squaresâ€”that is, the overlapping portions assume the color of the third box.</Paragraph>

<Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    &lt;Canvas Height="400" Width="600">
        &lt;Canvas Height="100" Width="100"  Top="0" Left="0">
            &lt;Rectangle Width="100" Height="100" Fill="red"/>   
        &lt;/Canvas>
        &lt;Canvas Height="100" Width="100" Top="100" Left="100">
            &lt;Rectangle Width="100" Height="100" Fill="green"/>  
        &lt;/Canvas>
        &lt;Canvas Height="100" Width="100" Top="50" Left="50">
            &lt;Rectangle Width="100" Height="100" Fill="blue"/>  
        &lt;/Canvas>    
    &lt;/Canvas>
&lt;/Page>
</Paragraph>
    
<Paragraph Style="{StaticResource expanderStyle}">   
    <Expander IsExpanded="true" Header="Rendered Output"> 
        <Canvas Height="400" Width="600">
        <Canvas Height="100" Width="100"  Top="0" Left="0">
            <Rectangle Width="100" Height="100" Fill="red"/>   
        </Canvas>
        <Canvas Height="100" Width="100" Top="100" Left="100">
            <Rectangle Width="100" Height="100" Fill="green"/>  
        </Canvas>
        <Canvas Height="100" Width="100" Top="50" Left="50">
            <Rectangle Width="100" Height="100" Fill="blue"/>  
        </Canvas>    
    </Canvas>
    </Expander>
</Paragraph>
    
<Paragraph Style="{StaticResource noteParagraph}"><Bold>Note:</Bold> The <Bold>Canvas</Bold> element does not automatically produce scrollbars, even if its assigned width and height are greater than the available screen space. To render scrollbars, wrap the project in its entirety within a ScrollViewer element.</Paragraph>
<Paragraph Style="{StaticResource SubHeaderStyle}" Name="canvascode">Creating a Canvas in Code</Paragraph>
<Paragraph Style="{StaticResource mainContentStyle}">The following code example shows how to instantiate and use a <Bold>Canvas</Bold> using C#. Two TextBlock elements are absolutely positioned using the SetTop and SetLeft methods of the <Bold>Canvas</Bold>. The <Bold>Canvas</Bold> is assigned a Background color of LightSteelBlue.</Paragraph>

<Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
[C#]using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Threading;

namespace Canvas_Demo
{
    public class app : System.Windows.Application
    {
        System.Windows.Controls.TextBlock txt1;
        System.Windows.Controls.Canvas canvas;
        System.Windows.Controls.TextBlock txt2;
        System.Windows.Window mainWindow;

        protected override void OnStartingUp (StartingUpCancelEventArgs e)
        {
            base.OnStartingUp(e);
            CreateAndShowMainWindow();
        }

        private void CreateAndShowMainWindow()
        {
            // Create the application's main window
            mainWindow = new System.Windows.Window();

            // Create a canvas sized to fill the window
            canvas = new Canvas();
            canvas.Background = System.Windows.Media.Brushes.LightSteelBlue;

            // Add a "Hello World!" text element to the Canvas
            txt1 = new System.Windows.Controls.TextBlock();
            txt1.FontSize = 14;
            txt1.TextContent = "Hello World!";
            System.Windows.Controls.Canvas.SetTop(txt1, 100);
            System.Windows.Controls.Canvas.SetLeft(txt1, 10);
            canvas.Children.Add(txt1);

            // Add a second text element to show how absolute positioning works in a Canvas
            txt2 = new System.Windows.Controls.TextBlock();
            txt2.FontSize = 22;
            txt2.TextContent = "Isn't absolute positioning handy?";
            System.Windows.Controls.Canvas.SetTop(txt2, 200);
            System.Windows.Controls.Canvas.SetLeft(txt2, 75);
            canvas.Children.Add(txt2);
            
            mainWindow.Content= canvas;
            mainWindow.Show();
        }
    }

    internal sealed class EntryClass
    {
        [System.STAThread()]
        private static void Main ()
        {
            app app = new app ();
            app.Run ();
        }
    }
}
</Paragraph>

<Paragraph Style="{StaticResource SubHeaderStyle}" Name="canvasrelated">Related Topics<LineBreak/></Paragraph>
<List>
    <ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="dockpanel_ovw.xaml" TargetName="frame2">DockPanel Overview</Hyperlink></Paragraph></ListItem>

    <ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="grid_ovw.xaml" TargetName="frame2">Grid Overview</Hyperlink></Paragraph></ListItem>
    <ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="layout_ovw.xaml" TargetName="frame2">Layout "Cook Book"</Hyperlink></Paragraph></ListItem>
    <ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="panels_ovw.xaml" TargetName="frame2">Panels Overview</Hyperlink></Paragraph></ListItem>
    <ListItem><Paragraph Style="{StaticResource mainContentStyle}"><Hyperlink NavigateUri="stackpanel_ovw.xaml" TargetName="frame2">StackPanel Overview</Hyperlink></Paragraph></ListItem>
</List>


<Paragraph Style="{StaticResource mainContentStyle}">Send comments about this topic to Microsoft. Â© Microsoft Corporation. All rights reserved.</Paragraph>
    

</FlowDocument>
</FlowDocumentPageViewer>