<FlowDocumentPageViewer xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <FlowDocument ColumnWidth="350" ColumnGap="15" ColumnRuleWidth="1" ColumnRuleBrush="LightGray">

    <Paragraph Style="{StaticResource HeaderStyle}">StackPanel Overview</Paragraph>
    <Paragraph>
      <Rectangle Fill="Black" Height="1" Width="500" HorizontalAlignment="Left" />
      <LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource DisStyle}">
      [This topic is pre-release documentation and is subject to change in future releases. Blank topics are included as placeholders.]<LineBreak/>
    </Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      This topic provides a high-level introduction to <Bold>StackPanel</Bold>, which is used to "stack" elements horizontally or vertically.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">This topic contains the following sections.</Paragraph>

    <List>

      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#stackwhat">What Can I Do with a StackPanel?</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#stackversus">StackPanel vs. DockPanel</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#stackxaml">Creating a StackPanel in "XAML"</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#stackcode">Manipulating a StackPanel in Code</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#stackrelated">Related Topics</Hyperlink>
        </Paragraph>
      </ListItem>

    </List>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="stackwhat">What Can I Do with a StackPanel?</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      A <Bold>StackPanel</Bold> allows you to "stack" elements in an assigned direction. By using properties defined on <Bold>StackPanel</Bold>, content can "flow" both vertically (default) and horizontally. This concept is best illustrated visually. Here is an example from a common scenario.
    </Paragraph>

    <Paragraph Style="{StaticResource imageStyler}">
      <Image Stretch="Uniform">
        <Image.Source>
          <BitmapImage UriSource="\images\layout_stackpanel_ovw1.png"/>
        </Image.Source>
      </Image>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      Five TextBlock controls, each with a different Border and Background, are stacked vertically using the <Bold>StackPanel</Bold>. Child elements without a specified Width stretch to fill the parent window, while child elements with a designated Width center within the window. Horizontal alignment can be controlled using the HorizontalAlignment property.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The following "Extensible Application Markup Language" ("XAML") example illustrates how to create the application detailed in the preceding illustration.</Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Text="StackPanel Sample">	
    &lt;StackPanel>
        &lt;Border Background="SkyBlue" BorderBrush="Black" BorderThickness="1">
            &lt;TextBlock Foreground="black" FontSize="12">Stacked Item #1&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Width="400" Background="CadetBlue" BorderBrush="Black" BorderThickness="1">
            &lt;TextBlock Foreground="black" FontSize="14">Stacked Item #2&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Background="#ffff99" BorderBrush="Black" BorderThickness="1">
            &lt;TextBlock Foreground="black" FontSize="16">Stacked Item #3&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Width="200" Background="PaleGreen" BorderBrush="Black" BorderThickness="1">
            &lt;TextBlock Foreground="black" FontSize="18">Stacked Item #4&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Background="White" BorderBrush="Black" BorderThickness="1">
            &lt;TextBlock Foreground="black" FontSize="20">Stacked Item #5&lt;/TextBlock>
        &lt;/Border>
    &lt;/StackPanel>
&lt;/Page>
</Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <StackPanel>
          <Border Background="SkyBlue" BorderBrush="Black" BorderThickness="1">
            <TextBlock Foreground="black" FontSize="12">Stacked Item #1</TextBlock>
          </Border>
          <Border Width="400" Background="CadetBlue" BorderBrush="Black" BorderThickness="1">
            <TextBlock Foreground="black" FontSize="14">Stacked Item #2</TextBlock>
          </Border>
          <Border Background="#ffff99" BorderBrush="Black" BorderThickness="1">
            <TextBlock Foreground="black" FontSize="16">Stacked Item #3</TextBlock>
          </Border>
          <Border Width="200" Background="PaleGreen" BorderBrush="Black" BorderThickness="1">
            <TextBlock Foreground="black" FontSize="18">Stacked Item #4</TextBlock>
          </Border>
          <Border Background="White" BorderBrush="Black" BorderThickness="1">
            <TextBlock Foreground="black" FontSize="20">Stacked Item #5</TextBlock>
          </Border>
        </StackPanel>
      </Expander>
    </Paragraph>

    <Paragraph Style="{StaticResource noteParagraph}">
      <Bold>Note:</Bold> The default stack direction in a <Bold>StackPanel</Bold> is vertical. The Orientation property can be used to control content flow in a <Bold>StackPanel</Bold>.
    </Paragraph>
    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="stackversus">StackPanel vs. DockPanel</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      Although DockPanel can also "stack" child elements, DockPanel and <Bold>StackPanel</Bold> do not produce analagous results in some usage scenarios. For example, the order of child elements can affect their size in a DockPanel but not in a <Bold>StackPanel</Bold>. This is because <Bold>StackPanel</Bold> measures in the direction of stacking at Double.PositiveInfinity, whereas DockPanel measures only the available size.
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      The following markup example demonstrates this key difference between DockPanel and <Bold>StackPanel</Bold>.
    </Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
      Text="StackPanel vs. DockPanel">
    &lt;Grid Width="175" Height="150">
    &lt;Grid.ColumnDefinitions>
        &lt;ColumnDefinition />
    &lt;Grid.ColumnDefinitions>
    &lt;Grid.RowDefinitions>
        &lt;RowDefinition />
        &lt;RowDefinition />
    &lt;/Grid.RowDefinitions>
        
        &lt;DockPanel Grid.Column="0" Grid.Row="0">
                &lt;Image Stretch="Uniform">&lt;Image.Source>&lt;BitmapImage UriSource="\images\smiley_stackpanel.png"/>&lt;/Image.Source>&lt;/Image>
                &lt;Image Stretch="Uniform">&lt;Image.Source>&lt;BitmapImage UriSource="\images\smiley_stackpanel.png"/>&lt;/Image.Source>&lt;/Image>
                &lt;Image Stretch="Fill">&lt;Image.Source>&lt;BitmapImage UriSource="\images\smiley_stackpanel.png"/>&lt;/Image.Source>&lt;/Image>
        &lt;/DockPanel>

        &lt;StackPanel Grid.Column="0" Grid.Row="1"  Orientation="Horizontal">
                &lt;Image Stretch="Uniform">&lt;Image.Source>&lt;BitmapImage UriSource="\images\smiley_stackpanel.png"/>&lt;/Image.Source>&lt;/Image>
                &lt;Image Stretch="Uniform">&lt;Image.Source>&lt;BitmapImage UriSource="\images\smiley_stackpanel.png"/>&lt;/Image.Source>&lt;/Image>
                &lt;Image Stretch="Fill">&lt;Image.Source>&lt;BitmapImage UriSource="\images\smiley_stackpanel.png"/>&lt;/Image.Source>&lt;/Image>
        &lt;/StackPanel>
    &lt;/Grid>
&lt;/Page>
</Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <Grid Width="175" Height="150">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
          </Grid.RowDefinitions>
          <DockPanel Grid.Column="0" Grid.Row="0">
            <Image Stretch="Uniform">
              <Image.Source>
                <BitmapImage UriSource="\images\smiley_stackpanel.png"/>
              </Image.Source>
            </Image>
            <Image Stretch="Uniform">
              <Image.Source>
                <BitmapImage UriSource="\images\smiley_stackpanel.png"/>
              </Image.Source>
            </Image>
            <Image Stretch="Fill">
              <Image.Source>
                <BitmapImage UriSource="\images\smiley_stackpanel.png"/>
              </Image.Source>
            </Image>
          </DockPanel>

          <StackPanel Grid.Column="0" Grid.Row="1"  Orientation="Horizontal">
            <Image Stretch="Uniform">
              <Image.Source>
                <BitmapImage UriSource="\images\smiley_stackpanel.png"/>
              </Image.Source>
            </Image>
            <Image Stretch="Uniform">
              <Image.Source>
                <BitmapImage UriSource="\images\smiley_stackpanel.png"/>
              </Image.Source>
            </Image>
            <Image Stretch="Fill">
              <Image.Source>
                <BitmapImage UriSource="\images\smiley_stackpanel.png"/>
              </Image.Source>
            </Image>
          </StackPanel>
        </Grid>
      </Expander>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The difference in rendering behavior can be seen in this image.</Paragraph>

    <Paragraph Style="{StaticResource imageStyler}">
      <Image Stretch="Uniform">
        <Image.Source>
          <BitmapImage UriSource="\images\layout_smiley_stackpanel.png"/>
        </Image.Source>
      </Image>
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="stackxaml">Creating a StackPanel in "XAML"</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      <Bold>StackPanel</Bold> can be instantiated simply using "XAML". The following markup demonstrates how to use a <Bold>StackPanel</Bold> to create a set of vertically-positioned buttons.
    </Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Text="StackPanel Sample">
    &lt;StackPanel HorizontalAlignment="Left"
                VerticalAlignment="Top">
        &lt;Button DockPanel.Dock="Top">Button 1&lt;/Button>
        &lt;Button DockPanel.Dock="Top">Button 2&lt;/Button>
        &lt;Button DockPanel.Dock="Top">Button 3&lt;/Button>
    &lt;/StackPanel>
&lt;/Page>
</Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <StackPanel HorizontalAlignment="Left"
                    VerticalAlignment="Top">
          <Button DockPanel.Dock="Top">Button 1</Button>
          <Button DockPanel.Dock="Top">Button 2</Button>
          <Button DockPanel.Dock="Top">Button 3</Button>
        </StackPanel>
      </Expander>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      In order to get the buttons to display horizontally, the Orientation property must be specified in the parent <Bold>StackPanel</Bold>. By setting the Orientation property to Horizontal, content in the <Bold>StackPanel</Bold> flows from left to right, rather than from top to bottom. The following markup demonstrates the effect of the Orientation property.
    </Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Text="StackPanel Sample Two">
    &lt;StackPanel HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Orientation="Horizontal">
        &lt;Button DockPanel.Dock="Top">Button 1&lt;/Button>
        &lt;Button DockPanel.Dock="Top">Button 2&lt;/Button>
        &lt;Button DockPanel.Dock="Top">Button 3&lt;/Button>
    &lt;/StackPanel>
&lt;/Page>
</Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <StackPanel HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    Orientation="Horizontal">
          <Button DockPanel.Dock="Top">Button 1</Button>
          <Button DockPanel.Dock="Top">Button 2</Button>
          <Button DockPanel.Dock="Top">Button 3</Button>
        </StackPanel>
      </Expander>
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="stackcode">Manipulating a StackPanel in Code</Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      The following code example shows how to manipulate the content of a <Bold>StackPanel</Bold> using C#.
    </Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      Three ListBox elements are created in "XAML", each representing the possible values of the Orientation, HorizontalAlignment, and VerticalAlignment properties of a <Bold>StackPanel</Bold>. Selecting a value in any of the ListBox elements changes the associated property of the <Bold>StackPanel</Bold> and its child Button elements.
    </Paragraph>

    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
...
<!-- Omitted Code: Parent Window and environment variables are defined -->
    &lt;ListBox SelectionChanged="changeOrientation" Grid.Row="2" Grid.Column="1" Width="100" Height="50">
        &lt;ListBoxItem>Horizontal&lt;/ListBoxItem>
        &lt;ListBoxItem>Vertical&lt;/ListBoxItem>
    &lt;/ListBox>
    &lt;ListBox SelectionChanged="changeHorAlign" Grid.Row="2" Grid.Column="3" Width="100" Height="50">
        &lt;ListBoxItem>Left&lt;/ListBoxItem>
        &lt;ListBoxItem>Right&lt;/ListBoxItem>
        &lt;ListBoxItem>Center&lt;/ListBoxItem>
        &lt;ListBoxItem>Stretch&lt;/ListBoxItem>
    &lt;/ListBox>
    &lt;ListBox SelectionChanged="changeVertAlign" Grid.Row="2" Grid.Column="5" Width="100" Height="50">
        &lt;ListBoxItem>Top&lt;/ListBoxItem>
        &lt;ListBoxItem>Bottom&lt;/ListBoxItem>
        &lt;ListBoxItem>Center&lt;/ListBoxItem>
        &lt;ListBoxItem>Stretch&lt;/ListBoxItem>
    &lt;/ListBox>
    
    &lt;StackPanel Grid.ColumnSpan="6" Grid.Row="3" Name="sp1" Background="Yellow">
        &lt;Button>Button One&lt;/Button>
        &lt;Button>Button Two&lt;/Button>
        &lt;Button>Button Three&lt;/Button>
        &lt;Button>Button Four&lt;/Button>
        &lt;Button>Button Five&lt;/Button>
        &lt;Button>Button Six&lt;/Button>
    &lt;/StackPanel>

&lt;!-- Omitted Code: Closing tags not shown -->
...
 </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The events associated with the ListBox selection changes are defined in a C# code-behind file.</Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
...
&lt;!-- Omitted Code: Using declarations and subclassing not shown -->        
               
public void changeOrientation(object sender, SelectionChangedEventArgs args)
    {
        ListBoxItem li = ((sender as ListBox).SelectedItem as ListBoxItem);
        if (li.Content.ToString() == "Horizontal")
            {
            sp1.Orientation = System.Windows.Controls.Orientation.Horizontal;
            }
            else if (li.Content.ToString() == "Vertical")
            {
            sp1.Orientation = System.Windows.Controls.Orientation.Vertical;
            }
    }
        
public void changeHorAlign(object sender, RoutedEventArgs e)
    {
        ListBoxItem li = ((sender as ListBox).SelectedItem as ListBoxItem);
        if (li.Content.ToString() == "Left")
            {
            sp1.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
            }
        else if (li.Content.ToString() == "Right")
            {
            sp1.HorizontalAlignment = System.Windows.HorizontalAlignment.Right;
            }
        else if (li.Content.ToString() == "Center")
            {
            sp1.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
            }
        else if (li.Content.ToString() == "Stretch")
            {
            sp1.HorizontalAlignment = System.Windows.HorizontalAlignment.Stretch;
            }
    }

public void changeVertAlign(object sender, RoutedEventArgs e)
    {
        ListBoxItem li = ((sender as ListBox).SelectedItem as ListBoxItem);
        if (li.Content.ToString() == "Top")
            {
            sp1.VerticalAlignment = System.Windows.VerticalAlignment.Top;
            }
        else if (li.Content.ToString() == "Bottom")
            {
            sp1.VerticalAlignment = System.Windows.VerticalAlignment.Bottom;
            }
        else if (li.Content.ToString() == "Center")
            {
            sp1.VerticalAlignment = System.Windows.VerticalAlignment.Center;
            }
        else if (li.Content.ToString() == "Stretch")
            {
            sp1.VerticalAlignment = System.Windows.VerticalAlignment.Stretch;
            }
    }      

&lt;!-- Omitted Code: Closing brackets omitted -->
...
</Paragraph>
    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="stackrelated">
      Related Topics<LineBreak/>
    </Paragraph>
    <List>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="canvas_ovw.xaml" TargetName="frame2">Canvas Overview</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="dockpanel_ovw.xaml" TargetName="frame2">DockPanel Overview</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="grid_ovw.xaml" TargetName="frame2">Grid Overview</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="layout_ovw.xaml" TargetName="frame2">Layout "Cook Book"</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="panels_ovw.xaml" TargetName="frame2">Panels Overview</Hyperlink>
        </Paragraph>
      </ListItem>
    </List>

    <Paragraph Style="{StaticResource mainContentStyle}">Send comments about this topic to Microsoft. © Microsoft Corporation. All rights reserved.</Paragraph>


  </FlowDocument>
</FlowDocumentPageViewer>