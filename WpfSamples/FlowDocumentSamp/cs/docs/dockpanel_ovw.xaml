<FlowDocumentPageViewer xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <FlowDocument ColumnWidth="350" ColumnGap="15" ColumnRuleWidth="1" ColumnRuleBrush="LightGray">
    <Paragraph Style="{StaticResource HeaderStyle}">DockPanel Overview</Paragraph>

    <Paragraph>
      <Rectangle Fill="Black" Height="1" Width="500" HorizontalAlignment="Left" />
      <LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource DisStyle}">
      [This topic is pre-release documentation and is subject to change in future releases. Blank topics are included as placeholders.]<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      The <Bold>DockPanel</Bold> uses the attached Dock property to position content along the edges of a container. When Dock is set to Top or Bottom, it stacks the child elements above or below each other. When Dock is set to Left or Right, it stacks the child elements to the left or right of each other. You can use <Bold>DockPanel</Bold> to position a group of related controls, such as a set of buttons.<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">This topic contains the following sections.</Paragraph>

    <List>

      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#dockwhat">What Can I Do with a DockPanel?</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#docksize">Sizing to Content</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#dockborder">Adding a Border to a DockPanel Element</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#dockxaml">Creating a DockPanel in "XAML"</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#dockcode">Creating a DockPanel in Code</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="#dockrelated">Related Topics</Hyperlink>
        </Paragraph>
      </ListItem>
    </List>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="dockwhat">What Can I Do with a DockPanel?</Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      A <Bold>DockPanel</Bold> allows you to dock elements to an assigned direction. This is best illustrated visually. Here is an example from an everyday interface.<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource imageStyler}">
      <Image Stretch="Uniform">
        <Image.Source>
          <BitmapImage UriSource="\images\overview_dockpanel.gif"/>
        </Image.Source>
      </Image>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">The colors and text distinguish the Dock direction.</Paragraph>

    <List>

      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">Blue: Dock="Top"</Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">Green: Dock="Left"</Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">Yellow: Dock="Bottom"</Paragraph>
      </ListItem>
    </List>


    <Paragraph Style="{StaticResource mainContentStyle}">
      The last rectangle in the user interface (UI)—the content pane with "Hard Disk Drives"—is rendered to the right. This content "fills" the remaining space.<LineBreak/>
    </Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      The following "Extensible Application Markup Language" ("XAML") example illustrates how to create a UI similar to the one in the preceding illustration.<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
    &lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">   
    &lt;DockPanel Height="250" Width="400">
        &lt;Border Height="25" Background="SkyBlue" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Top">
            &lt;TextBlock Foreground="black">Dock = "Top"&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Height="25" Background="SkyBlue" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Top">
            &lt;TextBlock Foreground="black">Dock = "Top"&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Height="25" Background="#ffff99" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Bottom">
            &lt;TextBlock Foreground="black">Dock = "Bottom"&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Width="200" Background="PaleGreen" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Left">
            &lt;TextBlock Foreground="black">Dock = "Left"&lt;/TextBlock>
        &lt;/Border>
        &lt;Border Background="White" BorderBrush="Black" BorderThickness="1">
            &lt;TextBlock Foreground="black" TextWrapping="Wrap">This content "Fills" the remaining, unallocated space.&lt;/TextBlock>
        &lt;/Border>
    &lt;/DockPanel>
    &lt;/Page></Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <DockPanel Height="250" Width="400">
          <Border Height="25" Background="SkyBlue" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Top">
            <TextBlock Foreground="black">Dock = "Top"</TextBlock>
          </Border>
          <Border Height="25" Background="SkyBlue" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Top">
            <TextBlock Foreground="black">Dock = "Top"</TextBlock>
          </Border>
          <Border Height="25" Background="#ffff99" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Bottom">
            <TextBlock Foreground="black">Dock = "Bottom"</TextBlock>
          </Border>
          <Border Width="200" Background="PaleGreen" BorderBrush="Black" BorderThickness="1" DockPanel.Dock="Left">
            <TextBlock Foreground="black">Dock = "Left"</TextBlock>
          </Border>
          <Border Background="White" BorderBrush="Black" BorderThickness="1">
            <TextBlock Foreground="black" TextWrapping="Wrap">This content "Fills" the remaining, unallocated space.</TextBlock>
          </Border>
        </DockPanel>
      </Expander>
    </Paragraph>

    <Paragraph Style="{StaticResource noteParagraph}">
      <Bold>Note:</Bold> By default, the last child of a <Bold>DockPanel</Bold> element will "fill" the remaining, unallocated space. If this behavior is not desired, use LastChildFill="False".<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="docksize">
      Sizing to Content<LineBreak/>
    </Paragraph>


    <Paragraph Style="{StaticResource mainContentStyle}">
      If its Height and Width properties are not specified, the <Bold>DockPanel</Bold> sizes to its content; the size can increase or decrease to accommodate the size of its child elements. However, when these properties are specified and there is no longer room for the next specified child element, <Bold>DockPanel</Bold> does not display that child element or subsequent child elements and does not measure subsequent child elements.<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="dockborder">
      Adding a Border to a DockPanel Element<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      In order for a <Bold>DockPanel</Bold> element to have a border, it must be encapsulated within a Border element.<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource mainContentStyle}">
      The following code example shows how to display Hello World within a <Bold>DockPanel</Bold> with a border and background.<LineBreak/>
    </Paragraph>

    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"&gt;
    &lt;Border BorderThickness="2"
            BorderBrush="Black"
            Background="LightGray"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Width="100"
            Height="100"&gt;
        &lt;DockPanel&gt;
            &lt;TextBlock DockPanel.Dock="Top">Hello World!&lt;/TextBlock&gt;
        &lt;/DockPanel&gt;
    &lt;/Border&gt;
&lt;/Page&gt;
</Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <Border BorderThickness="2"
                BorderBrush="Black"
                Background="LightGray"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Width="100"
                Height="100">
          <DockPanel>
            <TextBlock DockPanel.Dock="Top">Hello World!</TextBlock>
          </DockPanel>
        </Border>
      </Expander>
    </Paragraph>


    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="dockxaml">
      Creating a DockPanel in "XAML"<LineBreak/>
    </Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      The following markup demonstrates how to use a <Bold>DockPanel</Bold> to create a set of vertically-positioned buttons. The Dock property of each Button is set to Top. The first button in the markup, Button 1, is positioned at the top of the container area, and each successive button in the markup is positioned at the top of the remaining container area—that is, below Button 1. Button 3 is the bottom-most element.<LineBreak/>
    </Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Text="DockPanel Sample"&gt;
    &lt;DockPanel Name="root" Height="225" Width="200" HorizontalAlignment="Left" VerticalAlignment="Top"&gt;
        &lt;Button DockPanel.Dock="Top" Height="75">Button 1&lt;/Button&gt;
        &lt;Button DockPanel.Dock="Top" Height="75">Button 2&lt;/Button&gt;
        &lt;Button DockPanel.Dock="Top" Height="75">Button 3&lt;/Button&gt;
    &lt;/DockPanel&gt;
&lt;/Page&gt;
</Paragraph>

    <Paragraph Style="{StaticResource expanderStyle}">
      <Expander IsExpanded="true" Header="Rendered Output">
        <DockPanel Name="root" Height="225" Width="200" HorizontalAlignment="Left" VerticalAlignment="Top">
          <Button DockPanel.Dock="Top" Height="75">Button 1</Button>
          <Button DockPanel.Dock="Top" Height="75">Button 2</Button>
          <Button DockPanel.Dock="Top" Height="75">Button 3</Button>
        </DockPanel>
      </Expander>
    </Paragraph>


    <Paragraph Style="{StaticResource noteParagraph}">
      <Bold>Note:</Bold> When you do not set the Dock property of the <Bold>DockPanel</Bold> on the buttons, the buttons stack horizontally to the left of the container. The default value of the Dock property is  Left.<LineBreak/>
    </Paragraph>


    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="dockcode">
      Creating a DockPanel in Code<LineBreak/>
    </Paragraph>
    <Paragraph Style="{StaticResource mainContentStyle}">
      The following code example shows how to create a <Bold>DockPanel</Bold> using C#. Five Rectangle elements are instantiated and stacked within a parent <Bold>DockPanel</Bold> to partition space similarly to the first "XAML" example above. Each rectangle is "Docked" within the parent <Bold>DockPanel</Bold>, with the final Rectangle "filling" the remaining space.<LineBreak/>
    </Paragraph>
    <Paragraph Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
[C#]using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Threading;

namespace DockPanel_Demo
{
    public class app : System.Windows.Application
    {
        System.Windows.Shapes.Rectangle rect1;
        System.Windows.Shapes.Rectangle rect2;
        System.Windows.Shapes.Rectangle rect3;
        System.Windows.Shapes.Rectangle rect4;
        System.Windows.Shapes.Rectangle rect5;
        System.Windows.Controls.DockPanel dockPanel;
        System.Windows.Window mainWindow;

        protected override void OnStartingUp (StartingUpCancelEventArgs e)
        {
            base.OnStartingUp (e);
            CreateAndShowMainWindow ();
        }

        private void CreateAndShowMainWindow()
        {
            // Create the application's main window
            mainWindow = new System.Windows.Window ();

            // Create a DockPanel
            dockPanel = new DockPanel();

            // Add the first rectangle to the DockPanel
            rect1 = new System.Windows.Shapes.Rectangle();
            rect1.Stroke = System.Windows.Media.Brushes.Black;
            rect1.Fill = System.Windows.Media.Brushes.SkyBlue;
            rect1.Height = 25;
            System.Windows.Controls.DockPanel.SetDock(rect1, System.Windows.Controls.Dock.Top);
            dockPanel.Children.Add (rect1);

            // Add the second rectangle to the DockPanel
            rect2 = new System.Windows.Shapes.Rectangle();
            rect2.Stroke = System.Windows.Media.Brushes.Black;
            rect2.Fill = System.Windows.Media.Brushes.SkyBlue;
            rect2.Height = 25;
            System.Windows.Controls.DockPanel.SetDock(rect2, System.Windows.Controls.Dock.Top);
            dockPanel.Children.Add (rect2);

            // Add the third rectangle to the DockPanel
            rect4 = new System.Windows.Shapes.Rectangle();
            rect4.Stroke = System.Windows.Media.Brushes.Black;
            rect4.Fill = System.Windows.Media.Brushes.Khaki;
            rect4.Height = 25;
            System.Windows.Controls.DockPanel.SetDock(rect4, System.Windows.Controls.Dock.Bottom);
            dockPanel.Children.Add (rect4);

            // Add the fourth rectangle to the DockPanel
            rect3 = new System.Windows.Shapes.Rectangle();
            rect3.Stroke = System.Windows.Media.Brushes.Black;
            rect3.Fill = System.Windows.Media.Brushes.PaleGreen;
            rect3.Width = 200;
            System.Windows.Controls.DockPanel.SetDock(rect3, System.Windows.Controls.Dock.Left);
            dockPanel.Children.Add (rect3);

            // Add the final rectangle to the DockPanel
            rect5 = new System.Windows.Shapes.Rectangle();
            rect5.Stroke = System.Windows.Media.Brushes.Black;
            rect5.Fill = System.Windows.Media.Brushes.White;
            dockPanel.Children.Add (rect5);
            mainWindow.Content = dockPanel;
            mainWindow.Text = "DockPanel Sample";
            mainWindow.Show();
        }
    }

    internal sealed class EntryClass
    {
        [System.STAThread()]
        private static void Main()
        {
            app app = new app();
            app.Run();
        }
    }
}
<LineBreak/></Paragraph>

    <Paragraph Style="{StaticResource SubHeaderStyle}" Name="dockrelated">
      Related Topics<LineBreak/>
    </Paragraph>
    <List>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="canvas_ovw.xaml" TargetName="frame2">Canvas Overview</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="grid_ovw.xaml" TargetName="frame2">Grid Overview</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="layout_ovw.xaml" TargetName="frame2">Layout "Cook Book"</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="panels_ovw.xaml" TargetName="frame2">Panels Overview</Hyperlink>
        </Paragraph>
      </ListItem>
      <ListItem>
        <Paragraph Style="{StaticResource mainContentStyle}">
          <Hyperlink NavigateUri="stackpanel_ovw.xaml" TargetName="frame2">StackPanel Overview</Hyperlink>
        </Paragraph>
      </ListItem>
    </List>

    <Paragraph Style="{StaticResource mainContentStyle}">Send comments about this topic to Microsoft. © Microsoft Corporation. All rights reserved.</Paragraph>


  </FlowDocument>
</FlowDocumentPageViewer>